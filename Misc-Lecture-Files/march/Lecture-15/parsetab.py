
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSNAME NUMBER COMMA LPAREN RPARENstatement : expressionstatement : expression : NAME "=" expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expressionexpression : \'-\' expression %prec UMINUSexpression : NAME LPAREN RPARENexpression : NAME LPAREN expr_list RPARENexpression : LPAREN expression RPARENexpr_list : expressionexpr_list : expr_list COMMA expressionexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'LPAREN':([0,1,3,4,7,8,9,10,11,12,25,],[3,7,3,3,3,3,3,3,3,3,3,]),'NUMBER':([0,3,4,7,8,9,10,11,12,25,],[6,6,6,6,6,6,6,6,6,6,]),'*':([1,2,6,13,14,15,16,18,19,20,21,22,23,24,26,],[-15,9,-14,9,-8,-9,9,9,-6,9,-7,9,-11,-10,9,]),'RPAREN':([1,6,7,13,14,15,16,17,18,19,20,21,22,23,24,26,],[-15,-14,15,23,-8,-9,-12,24,-3,-6,-4,-7,-5,-11,-10,-13,]),'COMMA':([1,6,14,15,16,17,18,19,20,21,22,23,24,26,],[-15,-14,-8,-9,-12,25,-3,-6,-4,-7,-5,-11,-10,-13,]),'$end':([0,1,2,5,6,14,15,18,19,20,21,22,23,24,],[-2,-15,-1,0,-14,-8,-9,-3,-6,-4,-7,-5,-11,-10,]),'NAME':([0,3,4,7,8,9,10,11,12,25,],[1,1,1,1,1,1,1,1,1,1,]),'/':([1,2,6,13,14,15,16,18,19,20,21,22,23,24,26,],[-15,11,-14,11,-8,-9,11,11,-6,11,-7,11,-11,-10,11,]),'-':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,],[4,-15,12,4,4,-14,4,4,4,4,4,4,12,-8,-9,12,12,-6,-4,-7,-5,-11,-10,4,12,]),'=':([1,],[8,]),'+':([1,2,6,13,14,15,16,18,19,20,21,22,23,24,26,],[-15,10,-14,10,-8,-9,10,10,-6,-4,-7,-5,-11,-10,10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,3,4,7,8,9,10,11,12,25,],[2,13,14,16,18,19,20,21,22,26,]),'expr_list':([7,],[17,]),'statement':([0,],[5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','parse_expr.py',66),
  ('statement -> <empty>','statement',0,'p_statement_empty','parse_expr.py',72),
  ('expression -> NAME = expression','expression',3,'p_expression_assign','parse_expr.py',77),
  ('expression -> expression + expression','expression',3,'p_expression_binop','parse_expr.py',82),
  ('expression -> expression - expression','expression',3,'p_expression_binop','parse_expr.py',83),
  ('expression -> expression * expression','expression',3,'p_expression_binop','parse_expr.py',84),
  ('expression -> expression / expression','expression',3,'p_expression_binop','parse_expr.py',85),
  ('expression -> - expression','expression',2,'p_expression_uminus','parse_expr.py',90),
  ('expression -> NAME LPAREN RPAREN','expression',3,'p_fn_apply_0','parse_expr.py',95),
  ('expression -> NAME LPAREN expr_list RPAREN','expression',4,'p_fn_apply','parse_expr.py',100),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parse_expr.py',105),
  ('expr_list -> expression','expr_list',1,'p_expr_list_1','parse_expr.py',113),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list_2','parse_expr.py',118),
  ('expression -> NUMBER','expression',1,'p_expression_number','parse_expr.py',126),
  ('expression -> NAME','expression',1,'p_expression_name','parse_expr.py',131),
]
